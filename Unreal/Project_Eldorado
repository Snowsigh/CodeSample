// Fill out your copyright notice in the Description page of Project Settings.


#include "SubMonster.h"
#include "PxMathUtils.h"
#include "Components/CapsuleComponent.h"
#include "Components/AudioComponent.h"
#include "Kismet/GameplayStatics.h"

ASubMonster::ASubMonster()
{

}
void ASubMonster::CompleteAttack(UAnimMontage* Montage, bool bInterrupted)
{
	IsAttacking = false;
	return;
}
void ASubMonster::DefaultAttack(TArray<UAnimMontage*> AttackMontage)
{
	if(AttackMontage.IsEmpty()) return;
	
	auto AnimInstance = GetMesh()->GetAnimInstance();
	if (nullptr == AnimInstance) return;
	float fMontageIndex = FMath::RandRange(0, (AttackMontage.Num() - 1));
	AnimInstance->Montage_Play(AttackMontage[fMontageIndex]);
	
	FOnMontageEnded EndDelegate;
	EndDelegate.BindUObject(this, &ASubMonster::CompleteAttack);
	AnimInstance->Montage_SetEndDelegate(EndDelegate);

	FOnMontageBlendingOutStarted Completedelegate;
	Completedelegate.BindUObject(this, &ASubMonster::CompleteAttack);
	AnimInstance->Montage_SetEndDelegate(Completedelegate);
	return;
	
}
void ASubMonster::DefalutHitDeath(TArray<UAnimMontage*> HitMontage, TArray<UAnimMontage*> DeathMontage, EDamagedResult DamageState, USoundBase* HitSound)
{
	if (HitMontage.IsEmpty() || DeathMontage.IsEmpty()) return;
	auto AnimInstance = GetMesh()->GetAnimInstance();

	float fMontageIndex_Hit = FMath::RandRange(0, (HitMontage.Num() - 1));
	float fMontageIndex_Death = FMath::RandRange(0, (DeathMontage.Num() - 1));

	auto capsuleComponent = GetCapsuleComponent();

	switch (DamageState)
	{

	case EDamagedResult::Hit:
		AnimInstance->Montage_Play(HitMontage[fMontageIndex_Hit]);
		DamagedShader(2);
		UGameplayStatics::SpawnSoundAttached(HitSound, GetMesh());
		break;

	case EDamagedResult::Death:
		AnimInstance->Montage_Play(DeathMontage[fMontageIndex_Death]);
		if (nullptr != capsuleComponent) capsuleComponent->SetCollisionEnabled(ECollisionEnabled::NoCollision);
		break;

	case EDamagedResult::Except:
		break;
	default:
		break;
	}


	return;
}

